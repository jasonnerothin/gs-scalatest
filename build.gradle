apply plugin: 'scala'

// this type of variable declaration is deprecated and will be removed in gradle >= 3
localRepo = "$System.env.M2_REPO"
jsHomedir = "$System.env.JSHOMEDIR"
gsFolder = localRepo + '/com/gigaspaces/'
gsScalaLibDir = jsHomedir + '/lib/platform/scala/'
// 1. The tests in this build script only work with version 9.6.2 and possibly earlier
// 2. GigaSpaces' Scala support only works in versions 9.6.2 but not 9.7
// 3. Tests passed using a 9.6.2 build provided to me by jb
gigaSpacesVersion = '9.6.2-9900-RELEASE'

repositories {
    mavenCentral()
}

ensureDirectory(localRepo)
ensureDirectory(gsFolder)
ensureDirectory(jsHomedir)
ensureDirectory(gsScalaLibDir)

def ensureDirectory(directoryPath) {
    dir = new File(directoryPath)
    if (!dir.exists())
        throw new IllegalStateException(String.format("Directory %s does not exist.", directoryPath))
    if (!dir.isDirectory())
        throw new IllegalStateException(String.format("File %s is not a directory.", directoryPath))
}

dependencies {

    compile 'org.scala-lang:scala-library:2.10.3'

    compile files(gsFolder + 'gs-openspaces/' + gigaSpacesVersion + '/gs-openspaces-' + gigaSpacesVersion + '.jar')
    compile files(gsFolder + 'gs-runtime/' + gigaSpacesVersion + '/gs-runtime-' + gigaSpacesVersion + '.jar')
    compile files(gsScalaLibDir + 'gs-openspaces-scala.jar')

    // GS REQUIRED LIBS
    // todo not sure if we really shouldn't move some of these over to 'provided' from 'compile'
    compile 'org.springframework:spring-aop:3.1.3.RELEASE'
    compile 'org.springframework:spring-aspects:3.1.3.RELEASE'
    compile 'org.springframework:spring-beans:3.1.3.RELEASE'
    compile 'org.springframework:spring-context:3.1.3.RELEASE'
    compile 'org.springframework:spring-context-support:3.1.3.RELEASE'
    compile 'org.springframework:spring-core:3.1.3.RELEASE'
    compile 'org.springframework:spring-expression:3.1.3.RELEASE'
    compile 'org.springframework:spring-tx:3.1.3.RELEASE'
    compile 'aopalliance:aopalliance:1.0'
    compile 'commons-logging:commons-logging:1.1.3'

    testCompile 'org.scalatest:scalatest_2.10:2.0'
    testCompile 'org.scalamock:scalamock-scalatest-support_2.10:3.0.1'
    testCompile 'org.scalamock:scalamock-specs2-support_2.10:3.0.1'
    testCompile 'junit:junit:4.11'

}

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '4g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.setAdditionalParameters(['-feature'])
}

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask' , classpath: sourceSets.test.runtimeClasspath.asPath)
    ant.scalatest(runpath: sourceSets.test.output.classesDir, haltonfailure: 'true', fork: 'false') {
        reporter(type: 'stdout')
    }
}
